generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @unique @default(uuid())
  name          String?
  email         String         @unique
  picture       String?
  books         Book[]         @relation("UserBooks")
  plan          Plan           @default(FREE)
  role          Role           @default(USER)
  customerId    String?        @unique
  Subscription  Subscription?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  sentBooks     BookShare[]    @relation("SentBooks")
  receivedBooks BookShare[]    @relation("ReceivedBooks")
}

model Book {
  id              String            @id @unique @default(uuid())
  title           String
  author          String
  summary         String
  genre           String
  cover           String
  rating          Int               @default(2)
  user            User[]            @relation("UserBooks")
  createdAt       DateTime          @default(now())
  isPublic        Boolean           @default(false)
  isVerified      Boolean           @default(false)
  isVerificationRequested Boolean   @default(false)
  isRecommended   Boolean           @default(false)
  updatedAt       DateTime          @default(now()) @updatedAt
  readingProgress ReadingProgress[] @relation("BookReadingProgress")
  sharedWith      BookShare[]       @relation("SharedBooks")
}

model ReadingProgress {
  id                   String @id @unique @default(uuid())
  bookId               String
  month                Int
  completionPercentage Int    @default(0)
  book                 Book   @relation("BookReadingProgress", fields: [bookId], references: [id])

  @@unique([bookId, month])
}

model BookShare {
  id          String   @id @unique @default(uuid())
  bookId      String
  senderId    String
  receiverId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  book        Book     @relation("SharedBooks", fields: [bookId], references: [id])
  sender      User     @relation("SentBooks", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedBooks", fields: [receiverId], references: [id])
}

enum Plan {
  FREE
  SUBSCRIPTION
}

enum SubscriptionPeriod {
  MONTHLY
}

model Subscription {
  id     String             @id @unique @default(uuid())
  userId String             @unique
  plan   Plan
  period SubscriptionPeriod

  startDate DateTime @default(now())
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}